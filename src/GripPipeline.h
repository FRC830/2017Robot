/*
 * GripPipeline.h
 *
 *  Created on: Jan 10, 2017
 *      Author: RatPack
 */
#include "WPILib.h"
#ifndef SRC_GRIPPIPELINE_H_
#define SRC_GRIPPIPELINE_H_
#pragma once

#include "vision/VisionPipeline.h"
#include <opencv2/objdetect/objdetect.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
//#include <opencv2/contrib/contrib.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/features2d.hpp>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <map>
#include <vector>
#include <string>
#include <math.h>

namespace grip {

/**
* GripPipeline class.
*
* An OpenCV pipeline generated by GRIP.
*/
class GripPipeline {
	public:
		GripPipeline();
		void Process(cv::Mat &source0);
		void boilerProcess(cv::Mat &source0);

		void setsource0(cv::Mat &source0);
		void GuideLines(cv::Mat &source);

		cv::Mat* gethslThresholdOutput();
		std::vector<std::vector<cv::Point> >* getfindContoursOutput();
		std::vector<std::vector<cv::Point> >* getfilterContoursOutput();

		std::vector<std::vector<cv:: Point>> ProcessImage(cv::Mat &source0);

		void hslThreshold(cv::Mat &, double [], double [], double [], cv::Mat &);
		void findContours(cv::Mat &, bool , std::vector<std::vector<cv::Point> > &);
		void filterContourVertecies(std::vector <std::vector <cv::Point>> &contours, double maxVertexCount, double minVertexCount, std::vector<std::vector <cv::Point>> &output);
		void DrawContours(cv::Mat &imageOutput, std::vector<std::vector<cv::Point>> &points, int idx, const cv::Scalar &color);
		static bool FindContourArea(std::vector<cv::Point> &contour1, std::vector<cv::Point> &contour2 );
		static bool sortSimiliary(std::vector<double> &i, std::vector<double> &j);

	private:
			cv::Mat hslThresholdOutput;
			cv:: Mat source0;
			std::vector<std::vector<cv::Point> > findContoursOutput;
			std::vector<std::vector<cv::Point> > filterContourVerteciesOutput;
			//std::vector<std::vector<cv::Point> > smoothContours;

};


} // end namespace grip







#endif /* SRC_GRIPPIPELINE_H_ */
